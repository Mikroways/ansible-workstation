---
- name: Install asdf
  block:
    - name: Create asdf directory
      ansible.builtin.file:
        path: "{{ workstation_asdf_dest }}/bin"
        state: directory
        mode: "0755"
    - name: "Installing asdf ({{ workstation_asdf_version }})"
      ansible.builtin.include_tasks: _download.yml
      vars:
        _item: "asdf"
        name: "asdf"
        url: "{{ workstation_asdf_download_url }}"
        version: "{{ workstation_asdf_version }}"
        install_directory: "{{ workstation_asdf_dest }}/bin"
        install_command: >-
          {{ "tar xfz %downloaded% -C %install_directory% asdf" | replace('%install_directory%', workstation_asdf_dest + '/bin') }}
        version_command: "asdf version"

- name: "asdf check installed plugins"
  command: "asdf plugin list"
  register: asdf_plugin_list_output
  failed_when: asdf_plugin_list_output.rc not in [0 , 1]
  changed_when: false
  environment:
    PATH: "{{ workstation_asdf_dest }}/bin:{{ ansible_env.PATH }}"

- name: "asdf add plugins"
  command: "asdf plugin add {{ item.key }} {{ workstation_asdf_external_sources_plugins.get(item.key, '') }}"
  register: asdf_output
  failed_when: asdf_output.rc != 0
  changed_when: false
  environment:
    PATH: "{{ workstation_asdf_dest }}/bin:{{ ansible_env.PATH }}"
  when: item.key not in asdf_plugin_list_output.stdout_lines
  loop: "{{ workstation_asdf_tools | dict2items }}"
  loop_control:
    label: "Adding asdf plugin {{ item.key }}"

- name: "asdf update all plugins"
  command: "asdf plugin update --all"
  register: asdf_output
  failed_when: asdf_output.rc != 0
  changed_when: false
  environment:
    PATH: "{{ workstation_asdf_dest }}/bin:{{ ansible_env.PATH }}"

- name: "Install asdf version tools"
  command: "asdf install {{ item.0.key }} {{ item.1 }}"
  register: asdf_output
  failed_when: asdf_output.rc != 0
  changed_when: false
  retries: 4
  delay: 3
  until: asdf_output.rc == 0
  environment:
    PATH: "{{ workstation_asdf_dest }}/bin:{{ ansible_env.PATH }}"
  loop: "{{ workstation_asdf_tools | dict2items | subelements('value') }}"
  loop_control:
    label: "Installing asdf {{ item.0.key }}@{{ item.1 }}"

- name: "Install asdf set global tools"
  command: "asdf set --home {{ item.key }} {{ item.value | last }}"
  register: asdf_output
  failed_when: asdf_output.rc != 0
  changed_when: false
  when: item.value | length > 0
  environment:
    PATH: "{{ workstation_asdf_dest }}/bin:{{ ansible_env.PATH }}"
  loop: "{{ workstation_asdf_tools | dict2items }}"
  loop_control:
    label: "Set asdf global for {{ item.key }}@{{ item.value|last }}"

- name: "Set asdf direnv configuration directory"
  set_fact:
    asdf_direnv_plugin_config_dir: "{{ ansible_user_dir }}/.config/direnv/lib"

- name: "Create asdf direnv configuration directory"
  file:
    path: "{{ asdf_direnv_plugin_config_dir }}"
    state: directory
    mode: "0755"

- name: "Setup asdf direnv plugin"
  ansible.builtin.copy:
    dest: "{{ asdf_direnv_plugin_config_dir }}/use_asdf.sh"
    content: |
      ### Generated by ansible, doing the same as 'asdf direnv setup' ###
      use_asdf() {
        source_env "$(asdf cmd direnv envrc "$@")"
      }
