---
-
  name: Change user shell
  become: true
  user:
    shell: /bin/zsh
    name: "{{ ansible_user }}"
-
  name: Create antigen directory
  file:
    path: "{{ workstation_antigen_directory }}"
    state: directory
    mode: "0755"
-
  name: Download antigen
  ansible.builtin.get_url:
    url: "{{ workstation_antigen_url }}"
    dest: "{{ workstation_antigen_directory }}/antigen.zsh"
  register: uri_output
  until: uri_output.status_code == 200
  retries: 5
  delay: 2
-
  name: Create dotfiles directory
  file:
    path: "{{ workstation_dotfiles_directory }}"
    state: directory
    mode: "0755"
-
  name: Download dotfiles
  git:
    repo: "{{ workstation_dotfiles_repository }}"
    dest: "{{ workstation_dotfiles_directory }}"
    version: "{{ workstation_dotfiles_version | d('master') }}"
-
  name: Install dotfiles
  changed_when: false
  command: "{{ workstation_dotfiles_install_script }}"
-
  name: Download dotfiles fonts
  block:
    - name: Create local fonts directory
      file:
        path: "{{ workstation_dotfiles_fonts_directory }}"
        state: directory
        mode: "0755"
    - name: Install required fonts
      get_url:
        url: "{{ item }}"
        dest: "{{ workstation_dotfiles_fonts_directory }}/{{ item | basename }}"
      loop: "{{ workstation_dotfiles_fonts }}"
-
  name: "Set direnv configuration directory"
  set_fact:
    direnv_config_dir: "{{ ansible_user_dir }}/.config/direnv/lib"

-
  name: "Create direnv configuration directory"
  file:
    path: "{{ direnv_config_dir }}"
    state: directory
    mode: "0755"
-
  name: "Setup direnv use_terraform"
  ansible.builtin.copy:
    dest: "{{ direnv_config_dir }}/use_terraform.sh"
    content: |
      ### Generated by ansible ###
      use_terraform() {
        DIR="$(expand_path .)/.mw-bin"
        PATH_add "$DIR"
        mkdir -p "$DIR"
        if type -p tfswitch > /dev/null ; then
          tfswitch -b "$DIR/terraform"
        else
          echo
          echo "tfswitch is required!" >&2
          echo
        fi
      }
-
  name: "Setup direnv use_sops"
  ansible.builtin.copy:
    dest: "{{ direnv_config_dir }}/use_sops.sh"
    content: |
      ####################################################################
      # Generated by ansible
      ####################################################################
      # Retrieve the sops age key from bitwarden
      #
      # Globals:
      #   SOPS_AGE_KEY_FILE
      # Arguments:
      #   Client name
      ####################################################################
      ### Generated by ansible ###
      use_sops() {
        local client
        client=$1

        if [ -z "$client" ]; then
          echo "Missing client"
          exit 0
        fi

        if [ -z "$SOPS_AGE_KEY_FILE" ]; then
          echo "Missing SOPS_AGE_KEY_FILE variable"
          exit 0
        fi

        # The SOPS file already exists
        if [ ! -f "$SOPS_AGE_KEY_FILE" ]; then
          key_name="${client} - Age - Private Key"

          if [ -z "$BW_SESSION" ]; then
            BW_SESSION=$(bw unlock --raw)

            # Error in the login
            if [ $? -ne 0 ]; then
              exit 0
            fi

            # Export for bw cli
            export BW_SESSION
          fi

          if ! bw get password "$key_name" > $SOPS_AGE_KEY_FILE 2> /dev/null; then
            echo "Key for client '${client}' not found"
            rm "$SOPS_AGE_KEY_FILE"
          fi
        fi
      }
-
  name: "Setup direnv use_aws_sso_login"
  ansible.builtin.copy:
    dest: "{{ direnv_config_dir }}/use_aws_sso_login.sh"
    content: |
      ####################################################################
      # Generated by ansible
      ####################################################################
      # Execute, if is needed, the aws sso login command for every profile
      #
      # Globals:
      #   USE_AWS_SSO_LOGIN_DISABLE
      #   USE_AWS_SSO_LOGIN_DRY_RUN
      # Arguments:
      #   Custom ttl in minutes for the sso session, default to 60
      ####################################################################
      use_aws_sso_login() {
        local sso_ttl
        local profiles
        sso_ttl=${1:-60}
        profiles=""

        if [ -n "${USE_AWS_SSO_LOGIN_DISABLE:-}" ]; then
          echo -e "\033[33mDisabled auto login by variable 'USE_AWS_SSO_LOGIN_DISABLE'\033[0m"
          return
        fi

        [ -f "$PWD/.sso-login-expire" ] && sso_login_expire=$(cat "$PWD/.sso-login-expire")

        if [ "${sso_login_expire:-0}" -lt "$(date +%s)" ]; then
          profiles=$(env | { grep PROFILE || test $? = 1; } | { grep mw_ || test $? = 1; } | cut -d"=" -f 2 | sort | uniq)

          if [ -n "${profiles}" ]; then
            echo -e "\033[31mExpired AWS SSO session\033[0m"
            for profile in $profiles; do
              if [ -n "${USE_AWS_SSO_LOGIN_DRY_RUN:-}" ]; then
                echo aws sso login --profile "${profile}"
              else
                aws sso login --profile "${profile}"
              fi
            done
            if [ -n "${USE_AWS_SSO_LOGIN_DRY_RUN:-}" ]; then
              echo "date +%s --date='+${sso_ttl} minutes' > $PWD/.sso-login-expire"
            else
              date +%s --date="+${sso_ttl} minutes" > "$PWD/.sso-login-expire"
            fi
          else
            echo -e "\033[33mNo profiles found\033[0m"
          fi
        else
          echo -e "\033[32mAWS SSO session until $(date -d @"${sso_login_expire}" +%H:%M:%S)\033[0m"
        fi
      }
